-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/SergeyKuz1001/SD_HW_1#README.md</a>
@package cli
@version 0.1.0.0


-- | Модуль для определения типа стандартной ошибки. Этот тип используется
--   в качестве ошибки на протяжении всего исполнения программы.
module Data.Error

-- | Тип стандартной (для нашей системы) ошибки. Хранит стадию, на которой
--   эта ошибка произошла, а также дополнительную информацию.
data Error
Error :: String -> String -> Error
instance GHC.Classes.Eq Data.Error.Error
instance GHC.Show.Show Data.Error.Error


-- | Модуль для работы с кодом возврата.
module Data.ExitCode

-- | Код возврата. 0 означает штатное завершение, не 0 - завершение с
--   ошибкой.
newtype ExitCode
ExitCode :: Int -> ExitCode

-- | Функция преобразования нашего кода возврата в стандартный.
toStandardEC :: ExitCode -> ExitCode

-- | Функция преобразования стандартного кода возврата в наш.
fromStandardEC :: ExitCode -> ExitCode
instance GHC.Show.Show Data.ExitCode.ExitCode
instance GHC.Classes.Eq Data.ExitCode.ExitCode


-- | В данном модуле объявлены основные примитивы, в которые транслируется
--   пользовательский запрос после его парсинга.
module Data.ParsedPrimitive

-- | Примитив, полученный после парсинга пользовательского запроса.
data Primitive
Commands :: [[String]] -> Primitive
Assignment :: String -> String -> Primitive
instance GHC.Show.Show Data.ParsedPrimitive.Primitive
instance GHC.Classes.Eq Data.ParsedPrimitive.Primitive


-- | В данном модуле объявлена монада <tt><a>MonadError</a></tt> с
--   основными функциями для простой работы с ней.
module Monads.Error

-- | Синоним <tt><a>MonadError</a> <a>Error</a></tt>.
class MonadError Error m => MonadError m

-- | Операция для вызова исключения если написанное слева выражение ложно.
(?:) :: MonadError m => Bool -> Error -> m ()
infix 0 ?:

-- | Операция для вызова исключения если написанное слева выражение не
--   является значением.
(@:) :: MonadError m => Maybe a -> Error -> m a
infix 0 @:

-- | Аналог операции <tt><a>(?:)</a></tt> для выражения в монаде.
(?>=) :: MonadError m => m Bool -> Error -> m ()
infix 0 ?>=

-- | Аналог операции <tt><tt>(\@:)</tt></tt> для выражения в монаде.
(@>=) :: MonadError m => m (Maybe a) -> Error -> m a
infix 0 @>=

-- | Is used within a monadic computation to begin exception processing.
throwError :: MonadError e m => e -> m a

-- | A handler function to handle previous errors and return to normal
--   execution. A common idiom is:
--   
--   <pre>
--   do { action1; action2; action3 } `catchError` handler
--   </pre>
--   
--   where the <tt>action</tt> functions can call <a>throwError</a>. Note
--   that <tt>handler</tt> and the do-block must have the same return type.
catchError :: MonadError e m => m a -> (e -> m a) -> m a
instance Monads.Error.MonadError (Data.Either.Either Data.Error.Error)


-- | В данном модуле объявлен тип <tt><a>Variable</a></tt> для хранения
--   имени переменной и вспомогательные функции для работы с ним.
module Data.Variable

-- | Тип переменной. В нашей программе переменные разделяются на
--   
--   <ul>
--   <li>стабильные — после установки их значения оно не меняется, и</li>
--   <li>нестабильные — постоянно и/или неконтролируемо изменяется.</li>
--   </ul>
--   
--   На практике обычно применяется то их различие, что стабильные можно
--   хранить в какой-либо структуре данных, а нестабильные — нельзя.
data Variable
Stable :: Stable -> Variable
Volatile :: Volatile -> Variable

-- | Стабильная переменная может быть специфичной или обычной. Различие
--   между ними заключается в том, что у обычной переменной имя имеет
--   строго определённый вид, и этот вид гарантируется отсутствием
--   конструктора <tt><a>Usual</a></tt> вне этого модуля. Множество же
--   специфичных переменных строго ограничено.
data Stable
Specific :: Specific -> Stable

-- | Нестабильная переменная — это переменная, хранящая дату или время.
data Volatile
Date :: Volatile
Time :: Volatile

-- | Специфичная переменная — это переменная, содержащая код возврата
--   последнего пользовательского запроса.
data Specific
LastExitCode :: Specific

-- | Функция для конструирования значения типа <tt><a>Variable</a></tt>.
--   При конструировании проверяется соблюдение инварианта для обычной
--   переменной и в случае его нарушения вызывается ошибка.
variable :: MonadError m => String -> m Variable

-- | Функция безошибочного чтения имени переменной из строки. Возвращает,
--   помимо прочитанной переменной, остаток от строки. Возвращает
--   <tt><a>Nothing</a></tt> в случае невозможности прочтения переменной
--   (например из-за пустой строки на входе).
readVariable :: String -> Maybe (Variable, String)

-- | Функция преобразования произвольной переменной в стабильную. Если
--   данная переменная стабильна, она возвращается в <tt><a>Just</a></tt>,
--   иначе возвращается <tt><a>Nothing</a></tt>.
asStable :: Variable -> Maybe Stable

-- | Функция получения имени стабильной переменной. У обычной переменной её
--   имя хранится в самом типе, а спецефичным будут даны другие имена.
getVarName :: Stable -> String

-- | Стабильная переменная PATH.
varPath :: Stable

-- | Стабильная переменная PWD.
varPwd :: Stable

-- | Стабильная переменная PS1.
varPs1 :: Stable
instance GHC.Show.Show Data.Variable.Volatile
instance GHC.Classes.Ord Data.Variable.Volatile
instance GHC.Classes.Eq Data.Variable.Volatile
instance GHC.Show.Show Data.Variable.Specific
instance GHC.Classes.Ord Data.Variable.Specific
instance GHC.Classes.Eq Data.Variable.Specific
instance GHC.Show.Show Data.Variable.Stable
instance GHC.Classes.Ord Data.Variable.Stable
instance GHC.Classes.Eq Data.Variable.Stable
instance GHC.Show.Show Data.Variable.Variable
instance GHC.Classes.Ord Data.Variable.Variable
instance GHC.Classes.Eq Data.Variable.Variable


-- | В данном модуле объявлены основные примитивы для платформонезависимой
--   работы с файловой системой.
module Data.FSObjects

-- | Абсолютный путь к файлу. Главный инвариант этого типа — абсолютность
--   пути, однако довольно часто можно утверждать, что это корректный путь
--   к существующей папке или файлу.
data AbsFilePath

-- | Функция для конструирования значения типа <tt><a>AbsFilePath</a></tt>.
--   При конструировании проверяется соблюдение инварианта, и в случае его
--   нарушения вызывается ошибка.
absFilePath :: MonadError m => FilePath -> m AbsFilePath

-- | Функция проверки того, является ли путь простым именем файла или нет.
isBaseName :: FilePath -> Bool

-- | Операция конкатенации пути. В отличие от <tt><a>&lt;/&gt;</a></tt>
--   конкатенируются абсолютный и относительный пути, получая в итоге
--   абсолютный, сокращая при этом специальные директории <tt>.</tt> и
--   <tt>..</tt>.
(</>) :: AbsFilePath -> FilePath -> AbsFilePath
infixl 6 </>

-- | Разрешения файла.
data Permissions
Permissions :: Bool -> Bool -> Bool -> Permissions
[readPerm] :: Permissions -> Bool
[writePerm] :: Permissions -> Bool
[execPerm] :: Permissions -> Bool

-- | Файл в файловой системе — это абсолютный путь до него и разрешения.
data File
File :: AbsFilePath -> Permissions -> File
[filePath] :: File -> AbsFilePath
[permissions] :: File -> Permissions
instance GHC.Classes.Ord Data.FSObjects.AbsFilePath
instance GHC.Classes.Eq Data.FSObjects.AbsFilePath
instance GHC.Show.Show Data.FSObjects.AbsFilePath


-- | В этом модуле определены типы потоков ввода и вывода.
module Data.Handles

-- | Тип типа потока ввода. Ввод бывает
--   
--   <ul>
--   <li>из потока, предоставляемого предыдущей командой;</li>
--   <li>из файла;</li>
--   <li>из строки.</li>
--   </ul>
--   
--   Заметим, что ввод из стандартного потока ввода мы считаем частным
--   случаем ввода из потока, предоставляемого предыдущей командой.
data InputHandle
FromParentHandle :: InputHandle
FromFile :: AbsFilePath -> InputHandle
FromString :: Text -> InputHandle

-- | Тип типа потока вывода. Вывод бывает
--   
--   <ul>
--   <li>в новый pipe;</li>
--   <li>в стандартный поток вывода;</li>
--   <li>вникуда (аналог <tt><i>dev</i>null</tt>).</li>
--   </ul>
data OutputHandle
ToNewPipe :: OutputHandle
ToStdout :: OutputHandle
ToNowhere :: OutputHandle
instance GHC.Show.Show Data.Handles.InputHandle
instance GHC.Classes.Eq Data.Handles.InputHandle
instance GHC.Show.Show Data.Handles.OutputHandle
instance GHC.Classes.Eq Data.Handles.OutputHandle


-- | В данном модуле объявлены примитивы, в которые транслируется
--   пользовательский запрос после этапа анализа.
module Data.AnalyzedPrimitive

-- | Примитив — это
--   
--   <ul>
--   <li>специальная команда (<tt>exit</tt> или <tt>cd</tt>),</li>
--   <li>непустой набор обычных команд, разделённых pipeами,</li>
--   <li>присваивание стабильной переменной или</li>
--   <li>пустая команда.</li>
--   </ul>
data Primitive
Special :: Special -> Primitive
Commons :: NonEmpty Common -> Primitive
Assignment :: Stable -> String -> Primitive
Empty :: Primitive

-- | Специальная команда влияет на работу оболочки и может быть
--   
--   <ul>
--   <li><tt>exit</tt> — завершение работы оболочки с кодом возврата,
--   принимаемым опциональным параметром</li>
--   <li><tt>cd</tt> — смена текущей директории</li>
--   </ul>
data Special
Exit :: Maybe ExitCode -> Special
Cd :: FilePath -> Special

-- | Обычная команда имеет потоки ввода, вывода и поток ошибок. Может быть
--   либо внутренней (исполняется самой командной оболочкой), либо внешней.
data Common
Internal :: Internal -> Common
External :: External -> Common

-- | Внутренняя команда исполняется самой командной оболочкой и может быть
--   
--   <ul>
--   <li><tt>cat</tt> — вывод содержимого переданного файла;</li>
--   <li><tt>echo</tt> — вывод аргументов через пробел;</li>
--   <li><tt>wc</tt> — статистика для файла;</li>
--   <li><tt>pwd</tt> — имя текущей директории.</li>
--   </ul>
data Internal
Cat :: Maybe AbsFilePath -> Internal
Echo :: [String] -> Internal
Wc :: Maybe AbsFilePath -> Internal
Pwd :: Internal

-- | Внешняя команда вызывается по пути к исполняемому файлу с указанными
--   аргументами.
data External
Arguments :: AbsFilePath -> [String] -> External
instance GHC.Show.Show Data.AnalyzedPrimitive.Special
instance GHC.Classes.Eq Data.AnalyzedPrimitive.Special
instance GHC.Show.Show Data.AnalyzedPrimitive.Internal
instance GHC.Classes.Eq Data.AnalyzedPrimitive.Internal
instance GHC.Show.Show Data.AnalyzedPrimitive.External
instance GHC.Classes.Eq Data.AnalyzedPrimitive.External
instance GHC.Show.Show Data.AnalyzedPrimitive.Common
instance GHC.Classes.Eq Data.AnalyzedPrimitive.Common
instance GHC.Show.Show Data.AnalyzedPrimitive.Primitive
instance GHC.Classes.Eq Data.AnalyzedPrimitive.Primitive


-- | В данном модуле объявлены примитивы, в которые транслируется
--   пользовательский запрос после линковки.
module Data.LinkedPrimitive

-- | Примитив — это
--   
--   <ul>
--   <li>специальная команда,</li>
--   <li>присваивание стабильной переменной или</li>
--   <li>набор обычных команд с заданными типами потоков ввода и
--   вывода.</li>
--   </ul>
data Primitive
Special :: Special -> Primitive
Assignment :: Stable -> String -> Primitive
Commons :: [CommonWithHandles] -> Primitive

-- | Специальная команда влияет на работу оболочки и может быть
--   
--   <ul>
--   <li><tt>exit</tt> — завершение работы оболочки с кодом возврата,
--   принимаемым опциональным параметром</li>
--   <li><tt>cd</tt> — смена текущей директории</li>
--   </ul>
data Special
Exit :: Maybe ExitCode -> Special
Cd :: FilePath -> Special

-- | Обычная команда с заданными типами потоков ввода и вывода.
type CommonWithHandles = (Common, InputHandle, OutputHandle)

-- | Обычная команда, может быть внутренней или внешней.
data Common
External :: External -> Common
Internal :: Internal -> Common

-- | Внутренняя команда, представляется либо в виде чистой функции над
--   текстом с её названием, либо в виде нечистой команды.
--   
--   Название в чистой функции необходимо для сравнения двух функций.
--   Обычно выполняется инвариант, что две команды с одинковым названием
--   имеют эквивалентные функции, но этот инвариант никак не гарантируется.
data Internal
Pure :: String -> (Text -> Text) -> Internal
Impure :: Impure -> Internal

-- | Внешняя команда вызывается по пути к исполняемому файлу с указанными
--   аргументами.
data External
Arguments :: AbsFilePath -> [String] -> External

-- | Внутренняя нечистая команда, пока ею является только <tt>pwd</tt>
--   (требует доступ к классу <tt><tt>MonadPwdReader</tt></tt>).
--   
--   Важно: пока предполагается, что любая нечистая команда не модифицирует
--   реальное окружение (не изменяет файлы, не делает что-либо на удалённом
--   сервере и т. д.), это используется как один из неявных инвариантов в
--   работе <tt><tt>linker</tt></tt>.
data Impure
Pwd :: Impure
instance GHC.Show.Show Data.LinkedPrimitive.Impure
instance GHC.Classes.Eq Data.LinkedPrimitive.Impure
instance GHC.Show.Show Data.LinkedPrimitive.Common
instance GHC.Classes.Eq Data.LinkedPrimitive.Common
instance GHC.Show.Show Data.LinkedPrimitive.Primitive
instance GHC.Classes.Eq Data.LinkedPrimitive.Primitive
instance GHC.Classes.Eq Data.LinkedPrimitive.Internal
instance GHC.Show.Show Data.LinkedPrimitive.Internal


-- | В данном модуле объявлена монада <tt><a>MonadExit</a></tt>,
--   предоставляющая возможность выхода из данной программы.
module Monads.Exit

-- | Монада для выхода из программы с указанным кодом возврата.
class Monad m => MonadExit m
exit :: MonadExit m => ExitCode -> m ()


-- | В данном модуле объявлена монада <tt><a>MonadIO</a></tt> для работы с
--   потоками ввода/вывода.
module Monads.IO

-- | Монада для работы с потоками ввода/вывода.
class Monad m => MonadIO m

-- | Запись строки в поток вывода.
putStr :: MonadIO m => String -> m ()

-- | Чтение строки из потока ввода. Возвращает Nothing если достигнут конец
--   ввода (EOF).
getLine :: MonadIO m => m (Maybe String)

-- | Запись строки в поток вывода и перевод строки.
putStrLn :: MonadIO m => String -> m ()

-- | Запись объекта в виде строки в поток вывода.
print :: (MonadIO m, Show a) => a -> m ()

module Monads.PM
class Monad m => MonadPM m where {
    type Stream m :: Type;
    type Process m :: Type;
}
getDefaultStream :: MonadPM m => m (Stream m)
applyFuncToStream :: MonadPM m => (Text -> m Text) -> InputHandle -> OutputHandle -> Stream m -> m (Stream m)
createProcess :: MonadPM m => AbsFilePath -> [String] -> InputHandle -> OutputHandle -> [(Stable, String)] -> Stream m -> m (Process m, Stream m)
waitForProcess :: MonadPM m => Process m -> m ExitCode
terminateProcess :: MonadPM m => Process m -> m ()


-- | В данном модуле объявлена монада <tt><a>MonadPathReader</a></tt> для
--   получения значения переменной PATH.
module Monads.PathReader

-- | Монада для получения списка путей к директориям с исполняемыми
--   файлами, хранящегося в переменной PATH.
class Monad m => MonadPathReader m
getVarPath :: MonadPathReader m => m [AbsFilePath]

-- | The character that separates directories. In the case where more than
--   one character is possible, <a>pathSeparator</a> is the 'ideal' one.
--   
--   <pre>
--   Windows: pathSeparator == '\\'
--   Posix:   pathSeparator ==  '/'
--   isPathSeparator pathSeparator
--   </pre>
pathSeparator :: Char

-- | Разделитель путей, записанных в переменной PATH.
--   
--   <pre>
--   (on Linux) varPathSeparator == ':'
--   (on Windows) varPathSeparator == ';'
--   </pre>
varPathSeparator :: Char

-- | Парсер исходного значения переменной PATH в список абсолютных путей.
parseVarPath :: MonadError m => String -> m [AbsFilePath]


-- | В данном модуле объявлена монада <tt><a>MonadPathWriter</a></tt> для
--   записи значения переменной PATH.
module Monads.PathWriter

-- | Монада для записи списка абсолютных путей в переменную PATH.
class Monad m => MonadPathWriter m
setVarPath :: MonadPathWriter m => [AbsFilePath] -> m ()

-- | Функция преобразования списка путей в строку, которая будет являться
--   корректным значением переменной PATH.
formatVarPath :: [AbsFilePath] -> String


-- | В данном модуле объявлена монада <tt><a>MonadPwdReader</a></tt> для
--   получения значения переменной PWD.
module Monads.PwdReader

-- | Монада для получения значения переменной PWD (то есть абсолютного пути
--   до текущей директории).
class Monad m => MonadPwdReader m
getVarPwd :: MonadPwdReader m => m AbsFilePath


-- | В данном модуле объявлена монада <tt><a>MonadFS</a></tt> для
--   платформонезависимой работы с файловой системой.
module Monads.FS

-- | Монада для поиска файлов в файловой системе.
class Monad m => MonadFS m

-- | Поиск файла по абсолютному пути.
findFileByAbsPath :: MonadFS m => AbsFilePath -> m (Maybe File)

-- | Поиск файла в текущей директории (если указан относительный путь) или
--   в корневой директории (если указан абсолютный).
findFile :: (MonadFS m, MonadPwdReader m) => FilePath -> m (Maybe File)

-- | Поиск файла, аналогичный <tt><a>findFile</a></tt>, но с использованием
--   переменной PATH (через монаду <tt><tt>MonadVarPathReader</tt></tt>)
--   если указано только имя файла.
findFileAsExecutable :: (MonadFS m, MonadPwdReader m, MonadPathReader m) => FilePath -> m (Maybe File)

-- | Проверка на то, что файл по этому пути (абсолютному или
--   относительному) существует. Если файл существует, то возвращается
--   абсолютный путь до него.
doesFileExist :: (MonadFS m, MonadPwdReader m) => FilePath -> m (Maybe AbsFilePath)

-- | Аналогично <tt><a>doesFileExist</a></tt>, но при этом происходит поиск
--   с использованием переменной PATH и проверка, что найденный файл может
--   быть выполнен.
doesExecutableExist :: (MonadFS m, MonadPwdReader m, MonadPathReader m) => FilePath -> m (Maybe AbsFilePath)

-- | Проверка на то, что файл может быть прочитан. Возвращает
--   <tt>False</tt> если файл не существует.
isReadable :: MonadFS m => AbsFilePath -> m Bool

-- | Проверка на то, что файл может быть перезаписан. Возвращает
--   <tt>False</tt> если файл не существует.
isWritable :: MonadFS m => AbsFilePath -> m Bool

-- | Проверка на то, что файл может быть выполнен. Возвращает
--   <tt>False</tt> если файл не существует.
isExecutable :: MonadFS m => AbsFilePath -> m Bool


-- | В данном модуле объявлена монада <tt><tt>MonadPwdReader</tt></tt> для
--   записи значения переменной PWD.
module Monads.PwdWriter

-- | Монада для записи абсолютного пути до директории в переменную PWD.
class Monad m => MonadPwdWriter m
setVarPwd :: MonadPwdWriter m => AbsFilePath -> m ()

module Monads.SelfReferenced
class MonadFS m => MonadSelfReferenced m
getSelfPath :: MonadSelfReferenced m => m AbsFilePath


-- | В данном модуле объявлена монада <tt><a>MonadVarReader</a></tt> для
--   получения значений переменных.
module Monads.VarReader

-- | Монада для получения значений переменных.
class (MonadPathReader m, MonadPwdReader m) => MonadVarReader m

-- | Получение значения переменной по имени. Если переменной с таким именем
--   нет, то необходимо вернуть пустую строку.
getVar :: MonadVarReader m => Variable -> m String

-- | Получение значений всех стабильных переменных в виде списка пар (имя,
--   значение).
getVars :: MonadVarReader m => m [(Stable, String)]

-- | Функция <tt><a>getVarPath</a></tt>, выраженная через функции монады
--   <tt><a>MonadVarReader</a></tt>.
getVarPathDefault :: (MonadVarReader m, MonadError m) => m [AbsFilePath]

-- | Функция <tt><a>getVarPwd</a></tt>, выраженная через функции монады
--   <tt><a>MonadVarReader</a></tt>.
getVarPwdDefault :: (MonadVarReader m, MonadError m) => m AbsFilePath


-- | Модуль для вывода отладочной информации.
module Data.DebugInfo

-- | Тип стандартного отладочного сообщения. Состоит из стадии (про что это
--   информация) и само отладочное сообщение.
data DebugInfo
DebugInfo :: String -> String -> DebugInfo

-- | Функция печати отладочной информации. Принимает тип (стадию) отладки,
--   код (об этом чуть ниже) и тот объект, который необходимо вывести в
--   качестве отладочной информации. Предполагается, что эта функция будет
--   использоваться внутри конвейера различных преобразований, поэтому она
--   возвращает последний элемент, упакованный в монаду.
--   
--   Определение того, нужно ли выводить отладочную информацию или нет,
--   происходит через переменную <tt>DEBUG_OPTIONS</tt>. Если эта
--   переменная содержит код типа отладки в своём значении, то происходит
--   печать отладочной информации.
debugIfNecessary :: (MonadVarReader m, MonadError m, MonadIO m, Show a) => String -> Char -> a -> m a
instance GHC.Classes.Eq Data.DebugInfo.DebugInfo
instance GHC.Show.Show Data.DebugInfo.DebugInfo


-- | В данном модуле объявлена монада <tt><a>MonadVarWriter</a></tt> для
--   записи значений переменных.
module Monads.VarWriter

-- | Монада для записи значений переменных.
class (MonadPathWriter m, MonadPwdWriter m) => MonadVarWriter m

-- | Запись значения стабильной переменной.
setVar :: MonadVarWriter m => Stable -> String -> m ()

-- | Функция <tt><a>setVarPath</a></tt>, выраженная через функции монады
--   <tt><a>MonadVarWriter</a></tt>.
setVarPathDefault :: MonadVarWriter m => [AbsFilePath] -> m ()

-- | Функция <tt><a>setVarPwd</a></tt>, выраженная через функции монады
--   <tt><a>MonadVarWriter</a></tt>.
setVarPwdDefault :: MonadVarWriter m => AbsFilePath -> m ()


-- | Модуль предназначен для анализа корректности пользовательского запроса
--   и преобразования его в более выразительный формат.
module Phases.Analyzer

-- | Анализ корректности и преобразование пользовательского запроса.
analyzer :: (MonadError m, MonadFS m, MonadPwdReader m, MonadPathReader m) => Primitive -> m Primitive


-- | Модуль с внутренней нечистой командой <tt>pwd</tt>.
module Phases.Executor.Impure.Pwd

-- | Команда <tt>pwd</tt> принимает текст, игнорирует его и возвращает путь
--   до текущей директории в виде текста.
pwd :: MonadPwdReader m => Text -> m Text

module Phases.Executor.Impure


-- | Модуль для выполнения команд.
module Phases.Executor

-- | Функция для исполнения примитива. Исполняет список команд "почти"
--   параллельно, а именно подряд идущие внешние команды выполняются
--   параллельно, а внутренние - последовательно. Такое поведение вызвано
--   ограничениями реальной реализации.
executor :: (MonadPM m, MonadExit m, MonadVarWriter m, MonadVarReader m) => Primitive -> m ()


-- | Модуль с внутренней чистой командой <tt>cat</tt>.
module Phases.Linker.Pure.Cat

-- | Команда <tt>cat</tt> принимает текст на вход и возвращает его.
cat :: Text -> Text


-- | Модуль с внутренней чистой командой <tt>echo</tt>.
module Phases.Linker.Pure.Echo

-- | Команда <tt>echo</tt> принимает набор строк-аргументов и возвращает их
--   запись через пробел.
echo :: [String] -> Text


-- | Модуль с внутренней чистой командой <tt>wc</tt>.
module Phases.Linker.Pure.Wc

-- | Команда <tt>wc</tt> принимает текст и возвращает его статистику (тоже
--   в виде текста).
wc :: Text -> Text

module Phases.Linker.Pure


-- | Модуль для связывания команд, написанных через pipes.
module Phases.Linker

-- | Функция для связывания команд, написанных через pipes. Работает только
--   с последовательностями команд, остальные типы пользовательских
--   запросов возвращаются без изменений.
--   
--   Под "связыванием" команд здесь понимается определение типов потоков
--   ввода и вывода для каждой команды, а также некоторая оптимизация плана
--   исполнения пользовательского запроса.
linker :: MonadSelfReferenced m => Primitive -> m Primitive


-- | Модуль для парсинга пользовательского запроса.
--   
--   Весь этот модуль выглядел бы куда красивее на парсер-комбинаторах, но
--   их использовать явно запрещено в задании.
module Phases.Parser

-- | Функция для разбора строки после подстановки переменных. Выделяет либо
--   конвейер команд, либо пустую команду (пустая строка или строка только
--   из пробелов), либо присваивание переменной. Кидает исключение, если
--   строка имеет некорректный синтаксис.
parser :: MonadError m => String -> m Primitive
instance GHC.Show.Show Phases.Parser.Primitive
instance GHC.Classes.Eq Phases.Parser.Primitive


-- | Модуль для чтения пользовательского запроса.
module Phases.Reader

-- | Чтение пользовательского запроса. При конце потока ввода передаёт
--   дальше команду <tt>exit</tt>.
reader :: (MonadIO m, MonadVarReader m) => m String


-- | Модуль для подстановки значений переменных в пользовательский запрос.
module Phases.Substitutor

-- | Функция для подстановки переменных. Преобразовывает строку с $varname
--   и ${varname} в строку без них. Учитываются кавычки, разбор строки не
--   производится.
substitutor :: (MonadError m, MonadVarReader m) => String -> m String


-- | В данном модуле определена абстрактная точка входа в программу
--   <tt><a>abstractMain</a></tt>. Абстрактной она называется потому, что
--   она описывает работу программы в терминах абстрактной монады,
--   являющейся также представителем различных классов, добавляющих
--   различные функции (функции для работы с переменными окружения, функции
--   для работы с файловой системой и прочие).
module AbstractMain

-- | Абстрактная точка входа в программу, главный цикл программы.
--   
--   Каждая итерация цикла представляет собой последовательность
--   обработчиков <tt><a>reader</a></tt> → <tt><a>substitutor</a></tt> →
--   <tt><a>parser</a></tt> → <tt><a>analyzer</a></tt> →
--   <tt><a>linker</a></tt> → <tt><a>executor</a></tt>. При возникновении
--   ошибки на любом из этапов происходит печать ошибки и начало новой
--   итерации. Цикл бесконечен, выход из него (и из программы в целом)
--   происходит посредством вызова функции <tt><tt>exit</tt></tt> класса
--   <tt><a>MonadExit</a></tt> в <tt><a>executor</a></tt>.
abstractMain :: (MonadError m, MonadExit m, MonadIO m, MonadPM m, MonadSelfReferenced m, MonadVarReader m, MonadVarWriter m) => m ()
