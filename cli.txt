-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/SergeyKuz1001/SD_HW_1#README.md</a>
@package cli
@version 0.1.0.0


-- | <b>Warning</b>: Это Internal модуль, импортировать с осторожностью.
--   Internal модули используются для поддержания каких-либо важных
--   инвариантов, не выраженных в терминах типов.
--   
--   В данном модуле определён единственный тип <tt><a>VarName</a></tt>.
--   Отдельный модуль для этого типа понадобился для простоты поддержания
--   инварианта типа.
module Data.Primitive.Internal

-- | Имя переменной среды. Тип необходим для поддержания инварианта того,
--   что хранящаяся строка является корректным именем переменной.
newtype VarName
VarName :: String -> VarName
[getVarName] :: VarName -> String
instance GHC.Classes.Eq Data.Primitive.Internal.VarName
instance GHC.Show.Show Data.Primitive.Internal.VarName


-- | В данном модуле объявлены основные примитивы, в которые транслируется
--   пользовательский запрос после его парсинга.
module Data.Primitive

-- | Имя переменной среды. Тип необходим для поддержания инварианта того,
--   что хранящаяся строка является корректным именем переменной.
data VarName

-- | Примитив, полученный после парсинга пользовательского запроса.
data Primitive
Command :: [String] -> Primitive
Assignment :: VarName -> String -> Primitive
instance GHC.Show.Show Data.Primitive.Primitive
instance GHC.Classes.Eq Data.Primitive.Primitive


-- | В данном модуле объявлена монада <tt><a>MonadError</a></tt> с
--   основными функциями для простой работы с ней.
module Environment.MonadError

-- | Тип стандартной (для нашей системы) ошибки. Хранит стадию, на которой
--   эта ошибка произошла, а также дополнительную информацию.
data Error
Error :: String -> String -> Error

-- | Синоним <tt><a>MonadError</a> <a>Error</a></tt>.
class MonadError Error m => MonadError m

-- | Операция для вызова исключения если написанное слева выражение ложно.
(?:) :: MonadError m => Bool -> Error -> m ()
infix 0 ?:

-- | Операция для вызова исключения если написанное слева выражение не
--   является значением.
(@:) :: MonadError m => Maybe a -> Error -> m a
infix 0 @:

-- | Аналог операции <tt><a>(?:)</a></tt> для выражения в монаде.
(?>=) :: MonadError m => m Bool -> Error -> m ()
infix 0 ?>=

-- | Аналог операции <tt><tt>(\@:)</tt></tt> для выражения в монаде.
(@>=) :: MonadError m => m (Maybe a) -> Error -> m a
infix 0 @>=

-- | Is used within a monadic computation to begin exception processing.
throwError :: MonadError e m => e -> m a

-- | A handler function to handle previous errors and return to normal
--   execution. A common idiom is:
--   
--   <pre>
--   do { action1; action2; action3 } `catchError` handler
--   </pre>
--   
--   where the <tt>action</tt> functions can call <a>throwError</a>. Note
--   that <tt>handler</tt> and the do-block must have the same return type.
catchError :: MonadError e m => m a -> (e -> m a) -> m a
instance GHC.Show.Show Environment.MonadError.Error


-- | В данном модуле объявлена монада <tt><a>MonadExit</a></tt>,
--   предоставляющая возможность выхода из данной программы.
module Environment.MonadExit

-- | Код возврата (как в POSIX).
type ExitCode = Int

-- | Монада для выхода из программы с указанным кодом возврата.
class Monad m => MonadExit m
exit :: MonadExit m => ExitCode -> m ()


-- | <b>Warning</b>: Это Internal модуль, импортировать с осторожностью.
--   Internal модули используются для поддержания каких-либо важных
--   инвариантов, не выраженных в терминах типов.
--   
--   В данном модуле объявлены основные примитивы для представляния файла
--   из файловой системы в данной программе.
module Environment.MonadFS.Internal

-- | Абсолютный путь к файлу. Главный инвариант этого типа — абсолютность
--   пути, однако довольно часто можно утверждать, что это корректный путь
--   к существующей папке или файлу.
newtype AbsFilePath
AbsFilePath :: FilePath -> AbsFilePath
[asFilePath] :: AbsFilePath -> FilePath

-- | Операция конкатенации пути. В отличие от <tt><a>&lt;/&gt;</a></tt>
--   конкатенируются абсолютный и относительный пути, получая в итоге
--   абсолютный.
(</>) :: AbsFilePath -> FilePath -> AbsFilePath
infixl 6 </>

-- | Разрешения файла
data Permissions
Permissions :: Bool -> Bool -> Bool -> Permissions
[readPerm] :: Permissions -> Bool
[writePerm] :: Permissions -> Bool
[execPerm] :: Permissions -> Bool

-- | Файл в файловой системе — это абсолютный путь до него и разрешения.
data File
File :: AbsFilePath -> Permissions -> File
[absFilePath] :: File -> AbsFilePath
[permissions] :: File -> Permissions
instance GHC.Classes.Eq Environment.MonadFS.Internal.AbsFilePath
instance GHC.Show.Show Environment.MonadFS.Internal.AbsFilePath


-- | В данном модуле объявлены примитивы, в которые транслируется
--   пользовательский запрос после этапа анализа.
module Data.ImprovedPrimitive

-- | Примитив является командой (пустой или нет).
data Primitive
Command :: Command -> Primitive
EmptyCommand :: Primitive

-- | Команда — это объект, который может быть выполнен. Команда может быть
--   либо специальной (влиять на работу оболочки), либо обычной.
data Command
Special :: Special -> Command
Common :: Common -> Command

-- | Специальная команда влияет на работу оболочки. Таковой командой
--   является только команда <tt>exit</tt>, которая принимает опциональным
--   параметром код возврата из оболочки.
data Special
Exit :: Maybe Int -> Special

-- | Обычная команда имеет потоки ввода, вывода и поток ошибок. Может быть
--   либо внутренней (исполняется самой командной оболочкой), либо внешней.
data Common
Internal :: Internal -> Common
External :: External -> Common

-- | Внутренняя команда исполняется самой командной оболочкой и может быть
--   
--   <ul>
--   <li><tt>cat</tt> — вывод содержимого переданного файла;</li>
--   <li><tt>echo</tt> — вывод аргументов через пробел;</li>
--   <li><tt>wc</tt> — статистика для файла;</li>
--   <li><tt>pwd</tt> — имя текущей директории.</li>
--   </ul>
data Internal
Cat :: AbsFilePath -> Internal
Echo :: [String] -> Internal
Wc :: AbsFilePath -> Internal
Pwd :: Internal

-- | Внешняя команда вызывается по пути к исполняемому файлу с указанными
--   аргументами.
data External
Arguments :: AbsFilePath -> [String] -> External
instance GHC.Show.Show Data.ImprovedPrimitive.Special
instance GHC.Classes.Eq Data.ImprovedPrimitive.Special
instance GHC.Show.Show Data.ImprovedPrimitive.Internal
instance GHC.Classes.Eq Data.ImprovedPrimitive.Internal
instance GHC.Show.Show Data.ImprovedPrimitive.External
instance GHC.Classes.Eq Data.ImprovedPrimitive.External
instance GHC.Show.Show Data.ImprovedPrimitive.Common
instance GHC.Classes.Eq Data.ImprovedPrimitive.Common
instance GHC.Show.Show Data.ImprovedPrimitive.Command
instance GHC.Classes.Eq Data.ImprovedPrimitive.Command
instance GHC.Show.Show Data.ImprovedPrimitive.Primitive
instance GHC.Classes.Eq Data.ImprovedPrimitive.Primitive


-- | В данном модуле объявлена монада <tt><a>MonadIO</a></tt> для работы с
--   потоками ввода/вывода.
module Environment.MonadIO

-- | Монада для работы с потоками ввода/вывода.
class Monad m => MonadIO m

-- | Запись строки в поток вывода.
putStr :: MonadIO m => String -> m ()

-- | Чтение строки из потока ввода.
getLine :: MonadIO m => m String

-- | Запись строки в поток вывода и перевод строки.
putStrLn :: MonadIO m => String -> m ()

-- | Запись объекта в виде строки в поток вывода.
print :: (MonadIO m, Show a) => a -> m ()


-- | В данном модуле объявлена монада <tt><a>MonadVarPathReader</a></tt>
--   для получения значения переменной PATH.
module Environment.MonadVarPathReader

-- | Монада для получения списка путей к директориям с исполняемыми
--   файлами, хранящегося в переменной PATH.
class Monad m => MonadVarPathReader m
getVarPath :: MonadVarPathReader m => m [AbsFilePath]

-- | Разделитель путей, записанных в переменной PATH.
--   
--   <pre>
--   (on Linux) varPathSeparator == ':'
--   (on Windows) varPathSeparator == ';'
--   </pre>
varPathSeparator :: Char

-- | Парсер исходного значения переменной PATH в список абсолютных путей.
parseVarPath :: String -> [AbsFilePath]


-- | В данном модуле объявлена монада <tt><a>MonadFS</a></tt> для
--   платформонезависимой работы с файловой системой.
module Environment.MonadFS

-- | Абсолютный путь к файлу. Главный инвариант этого типа — абсолютность
--   пути, однако довольно часто можно утверждать, что это корректный путь
--   к существующей папке или файлу.
data AbsFilePath

-- | Разрешения файла
data Permissions

-- | Файл в файловой системе — это абсолютный путь до него и разрешения.
data File

-- | Монада для поиска файлов в файловой системе.
class MonadVarPathReader m => MonadFS m

-- | Поиск файла в текущей директории (если указан относительный путь) или
--   в корневой директории (если указан абсолютный).
findFile :: MonadFS m => FilePath -> m (Maybe File)

-- | Поиск файла, аналогичный <tt><a>findFile</a></tt>, но с использованием
--   переменной PATH (через монаду <tt><a>MonadVarPathReader</a></tt>) если
--   указано только имя файла.
findFileAsExecutable :: MonadFS m => FilePath -> m (Maybe File)

-- | Проверка на то, что файл по этому пути (абсолютному или
--   относительному) существует. Если файл существует, то возвращается
--   абсолютный путь до него.
doesFileExist :: MonadFS m => FilePath -> m (Maybe AbsFilePath)

-- | Аналогично <tt><a>doesFileExist</a></tt>, но при этом происходит поиск
--   с использованием переменной PATH и проверка, что найденный файл может
--   быть выполнен.
doesExecutableExist :: MonadFS m => FilePath -> m (Maybe AbsFilePath)

-- | Проверка на то, что файл может быть прочитан. Возвращает
--   <tt>False</tt> если файл не существует.
isReadable :: MonadFS m => AbsFilePath -> m Bool

-- | Проверка на то, что файл может быть перезаписан. Возвращает
--   <tt>False</tt> если файл не существует.
isWritable :: MonadFS m => AbsFilePath -> m Bool

-- | Проверка на то, что файл может быть выполнен. Возвращает
--   <tt>False</tt> если файл не существует.
isExecutable :: MonadFS m => AbsFilePath -> m Bool


-- | В данном модуле объявлена монада <tt><a>MonadVarPathWriter</a></tt>
--   для записи значения переменной PATH.
module Environment.MonadVarPathWriter

-- | Монада для записи списка абсолютных путей в переменную PATH.
class Monad m => MonadVarPathWriter m
setVarPath :: MonadVarPathWriter m => [AbsFilePath] -> m ()

-- | Функция преобразования списка путей в строку, которая будет являться
--   корректным значением переменной PATH.
formatVarPath :: [AbsFilePath] -> String


-- | В данном модуле объявлена монада <tt><a>MonadVarPwdReader</a></tt> для
--   получения значения переменной PWD.
module Environment.MonadVarPwdReader

-- | Монада для получения значения переменной PWD (то есть абсолютного пути
--   до текущей директории).
class Monad m => MonadVarPwdReader m
getVarPwd :: MonadVarPwdReader m => m AbsFilePath


-- | В данном модуле объявлен тип <tt><a>Environment</a></tt> как главный
--   контекст, в котором будут происходить все основные действия данной
--   программы.
module Environment

-- | Главный контекст для вычислений в программе.
data Environment a

-- | Функция для запуска вычислений.
runEnvironment :: Environment a -> IO a
instance Control.Monad.IO.Class.MonadIO Environment.Environment
instance Environment.MonadError.MonadError Environment.Environment
instance Control.Monad.Error.Class.MonadError Environment.MonadError.Error Environment.Environment
instance GHC.Base.Monad Environment.Environment
instance GHC.Base.Applicative Environment.Environment
instance GHC.Base.Functor Environment.Environment
instance Environment.MonadIO.MonadIO Environment.Environment
instance Environment.MonadVarPathReader.MonadVarPathReader Environment.Environment
instance Environment.MonadVarPwdReader.MonadVarPwdReader Environment.Environment
instance Environment.MonadFS.MonadFS Environment.Environment
instance Environment.MonadExit.MonadExit Environment.Environment


-- | В данном модуле объявлена монада <tt><tt>MonadVarPwdReader</tt></tt>
--   для записи значения переменной PWD.
module Environment.MonadVarPwdWriter

-- | Монада для записи абсолютного пути до директории в переменную PWD.
class Monad m => MonadVarPwdWriter m
setVarPwd :: MonadVarPwdWriter m => AbsFilePath -> m ()


-- | В данном модуле объявлена монада <tt><a>MonadVarsReader</a></tt> для
--   получения значений переменных.
module Environment.MonadVarsReader

-- | Монада для получения значений переменных.
class (MonadVarPathReader m, MonadVarPwdReader m) => MonadVarsReader m

-- | Получение значения переменной по имени. Если переменной с таким именем
--   нет, то необходимо вернуть пустую строку.
getVar :: MonadVarsReader m => String -> m String

-- | Получение значений всех объявленных переменных в виде списка пар (имя,
--   значение).
getVars :: MonadVarsReader m => m [(String, String)]

-- | Функция <tt><a>getVarPath</a></tt>, выраженная через функции монады
--   <tt><a>MonadVarsReader</a></tt>.
getVarPathDefault :: MonadVarsReader m => m [AbsFilePath]

-- | Функция <tt><a>getVarPwd</a></tt>, выраженная через функции монады
--   <tt><a>MonadVarsReader</a></tt>.
getVarPwdDefault :: MonadVarsReader m => m AbsFilePath


-- | В данном модуле объявлена монада <tt><a>MonadVarsWriter</a></tt> для
--   записи значений переменных.
module Environment.MonadVarsWriter

-- | Монада для записи значений переменных.
class (MonadVarPathWriter m, MonadVarPwdWriter m) => MonadVarsWriter m

-- | Запись значения переменной по её имени.
setVar :: MonadVarsWriter m => String -> String -> m ()

-- | Функция <tt><a>setVarPath</a></tt>, выраженная через функции монады
--   <tt><a>MonadVarsWriter</a></tt>.
setVarPathDefault :: MonadVarsWriter m => [AbsFilePath] -> m ()

-- | Функция <tt><a>setVarPwd</a></tt>, выраженная через функции монады
--   <tt><a>MonadVarsWriter</a></tt>.
setVarPwdDefault :: MonadVarsWriter m => AbsFilePath -> m ()


-- | Модуль предназначен для анализа корректности пользовательского запроса
--   и преобразования его в более выразительный формат.
module Phases.Analyzer

-- | Анализ корректности и преобразование пользовательского запроса.
analyzer :: (MonadError m, MonadFS m) => Primitive -> m Primitive

module Phases.Executor
executor :: (MonadIO m, MonadVarPwdReader m) => Primitive -> m (Maybe ExitCode)


-- | Модуль для парсинга пользовательского запроса.
module Phases.Parser

-- | Функция для разбора строки после подстановки переменных. Выделяет либо
--   команду с аргументами, либо пустую команду (пустая строка или строка
--   только из пробелов), либо присваивание переменной. Кидает исключение,
--   если строка имеет некорректный синтаксис.
parser :: MonadError m => String -> m Primitive


-- | Модуль предназначен для чтения пользовательского ввода (запроса).
module Phases.StringReader

-- | Чтение пользовательского запроса.
stringReader :: MonadIO m => m String


-- | В данном модуле объявлены все фазы работы данной программы.
module Phases

-- | Анализ корректности и преобразование пользовательского запроса.
analyzer :: (MonadError m, MonadFS m) => Primitive -> m Primitive
executor :: (MonadIO m, MonadVarPwdReader m) => Primitive -> m (Maybe ExitCode)

-- | Функция для разбора строки после подстановки переменных. Выделяет либо
--   команду с аргументами, либо пустую команду (пустая строка или строка
--   только из пробелов), либо присваивание переменной. Кидает исключение,
--   если строка имеет некорректный синтаксис.
parser :: MonadError m => String -> m Primitive

-- | Чтение пользовательского запроса.
stringReader :: MonadIO m => m String
